///////////////////////////////////////////////////////////
//  InGameContextMenu.cs
//  Implementation of the Class InGameContextMenu
//  Generated by Enterprise Architect
//  Created on:      2022/09/05 10:42:12
//  Original author: Smart Implement,Inc.
///////////////////////////////////////////////////////////
using System;
using System.Collections;
using System.Collections.Generic;
using TMPro;
using UnityEngine;
using UnityEngine.Events;
using UnityEngine.UI;
using UnityEngine.UIElements;

namespace SI_UnityUtils {
    public delegate void ContextMenuAction(InGameContextMenuData relatedData =null);
    /// <summary>
    /// Unity ゲーム内コンテキストメニュー
    /// ※以下のQiita記事を参考にしています
    /// https://qiita.com/hiroaki_okabe/items/0f2d863cf95ba882c8af
    /// </summary>
    public class InGameContextMenu {

		private static InGameContextMenu _Instance = null;
		public Transform CanvasTr;
		public GameObject MenuPanel;
		private static GameObject _menuPanel;
        private static GameObject _menuItem;
        private static List<GameObject> _listContextMenu;
        private static Vector3 _startPosition;
        private static float _width = 130;

		public InGameContextMenu()
        {
            // Canvas だけは、ヒエラルキーから拾う
            CanvasTr = GameObject.Find("Canvas").transform;
			_listContextMenu = new List<GameObject>();

            _menuPanel = (GameObject)Resources.Load("ContextMenu/Panel_ContextMenu");
            _menuItem = (GameObject)Resources.Load("ContextMenu/Panel_MenuItem");

        }
        public static bool IsActive
        {
            get
            {
                InGameContextMenu menu = Instance;
                return menu.MenuPanel != null;
            }
        }

        ~InGameContextMenu(){

		}
        private static InGameContextMenu Instance
        {
            get
            {
                if (_Instance == null)
                {
                    _Instance = new InGameContextMenu();
                }
                return _Instance;
            }
        }

        static public void OpenMenu(Vector3? position = null, float width = -1)
        {
            InGameContextMenu menu = Instance;
            if(menu.MenuPanel != null)
            {
                _listContextMenu.ForEach(obj => GameObject.Destroy(obj));
                GameObject.Destroy(menu.MenuPanel);
            }
            menu.MenuPanel = menu.Instantiate(_menuPanel);
            menu.ClearContextMenu();
            if (position != null)
            {
                _startPosition = (Vector3)position;
            }
            if(width > 0)
            {
                _width = width;
                var rect = (RectTransform)menu.MenuPanel.transform;
                rect.sizeDelta = new Vector2(_width,rect.sizeDelta.y);
            }

        }

        static public void AddContextMenu(string name, ContextMenuAction action=null,InGameContextMenuData data=null)
        {
            InGameContextMenu menu = Instance;
            var obj = menu.AddObj(_menuItem);
            var op = obj.GetComponent<MenuItemOperator>();
            op.BaseWidth = _width;
            _listContextMenu.Add(obj);
            op.button_Label.text = name;
            op.SetAction(action,data);
            var rect = menu.MenuPanel.transform as RectTransform;
            float x = _startPosition.x + rect.sizeDelta.x;
            //float y = _startPosition.y - rect.sizeDelta.y;
            //※パネルサイズから算出しようと思ったがContentSizeFitterのVerticalを参照しているので、常に0になってしまう
            float y = _startPosition.y - (_listContextMenu.Count * 12f) -6f;
            menu.MenuPanel.transform.position = new Vector3(x, y, 0);


        }
        static public void Close()
        {
            InGameContextMenu menu = Instance;
            if(menu.MenuPanel != null)
            {
                foreach (Transform child in menu.MenuPanel.transform)
                {   // 追加した GameObject を削除
                    GameObject.Destroy(child.gameObject);
                }
                GameObject.Destroy(menu.MenuPanel);
            }

        }
        private void ClearContextMenu()
		{
			if (_listContextMenu != null)
			{
				try
				{
                    _listContextMenu.ForEach(m => GameObject.Destroy(m));
					_listContextMenu.Clear();

                }
                catch { }

            }

		}


        private GameObject Instantiate(GameObject prefab)
        {
            GameObject obj = UnityEngine.Object.Instantiate(prefab);
            obj.transform.SetParent(CanvasTr, false);
            obj.transform.localScale = Vector3.one;
            obj.GetComponent<RectTransform>().anchoredPosition3D = Vector3.zero;
            // anchoredPosition3D をセットしないと、Pos.Z が不定になる。
            return obj;
        }

        private GameObject AddObj(GameObject prefab){

            GameObject obj = Instantiate(prefab);
            obj.transform.SetParent(MenuPanel.transform, false);
            return obj;
        }


    }//end InGameContextMenu

}//end namespace SI_UnityUtils